
Tiny_ws2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000838  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000524  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000358  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002df  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057a  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e8 e3       	ldi	r30, 0x38	; 56
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	9b d0       	rcall	.+310    	; 0x17a <main>
  44:	f7 c0       	rjmp	.+494    	; 0x234 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
	
	return;
}

ISR(TIM0_COMPA_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
	TCNT0 = 0;
  52:	12 be       	out	0x32, r1	; 50
}
  54:	0f 90       	pop	r0
  56:	0f be       	out	0x3f, r0	; 63
  58:	0f 90       	pop	r0
  5a:	1f 90       	pop	r1
  5c:	18 95       	reti

0000005e <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  5e:	9b 01       	movw	r18, r22
  60:	22 0f       	add	r18, r18
  62:	33 1f       	adc	r19, r19
  64:	62 0f       	add	r22, r18
  66:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  68:	b8 9a       	sbi	0x17, 0	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  6a:	28 b3       	in	r18, 0x18	; 24
  6c:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  6e:	38 b3       	in	r19, 0x18	; 24
  70:	31 60       	ori	r19, 0x01	; 1

  sreg_prev=SREG;
  72:	4f b7       	in	r20, 0x3f	; 63
  cli();
  74:	f8 94       	cli

  while (datlen--) {
  76:	61 15       	cp	r22, r1
  78:	71 05       	cpc	r23, r1
  7a:	91 f0       	breq	.+36     	; 0xa0 <__stack+0x1>
  7c:	fc 01       	movw	r30, r24
  7e:	68 0f       	add	r22, r24
  80:	79 1f       	adc	r23, r25
    curbyte=*data++;
  82:	81 91       	ld	r24, Z+

    __asm volatile(
  84:	98 e0       	ldi	r25, 0x08	; 8

00000086 <loop54>:
  86:	38 bb       	out	0x18, r19	; 24
  88:	00 00       	nop
  8a:	87 ff       	sbrs	r24, 7
  8c:	28 bb       	out	0x18, r18	; 24
  8e:	88 0f       	add	r24, r24
  90:	00 00       	nop
  92:	28 bb       	out	0x18, r18	; 24
  94:	00 c0       	rjmp	.+0      	; 0x96 <loop54+0x10>
  96:	9a 95       	dec	r25
  98:	b1 f7       	brne	.-20     	; 0x86 <loop54>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
  9a:	e6 17       	cp	r30, r22
  9c:	f7 07       	cpc	r31, r23
  9e:	89 f7       	brne	.-30     	; 0x82 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  a0:	4f bf       	out	0x3f, r20	; 63
  sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  a6:	9b 01       	movw	r18, r22
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	62 0f       	add	r22, r18
  ae:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  b0:	27 b3       	in	r18, 0x17	; 23
  b2:	24 2b       	or	r18, r20
  b4:	27 bb       	out	0x17, r18	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  b6:	28 b3       	in	r18, 0x18	; 24
  b8:	34 2f       	mov	r19, r20
  ba:	30 95       	com	r19
  bc:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
  be:	38 b3       	in	r19, 0x18	; 24
  c0:	43 2b       	or	r20, r19

  sreg_prev=SREG;
  c2:	3f b7       	in	r19, 0x3f	; 63
  cli();
  c4:	f8 94       	cli

  while (datlen--) {
  c6:	61 15       	cp	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	91 f0       	breq	.+36     	; 0xf0 <loop132+0x1a>
  cc:	fc 01       	movw	r30, r24
  ce:	68 0f       	add	r22, r24
  d0:	79 1f       	adc	r23, r25
    curbyte=*data++;
  d2:	81 91       	ld	r24, Z+

    __asm volatile(
  d4:	98 e0       	ldi	r25, 0x08	; 8

000000d6 <loop132>:
  d6:	48 bb       	out	0x18, r20	; 24
  d8:	00 00       	nop
  da:	87 ff       	sbrs	r24, 7
  dc:	28 bb       	out	0x18, r18	; 24
  de:	88 0f       	add	r24, r24
  e0:	00 00       	nop
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <loop132+0x10>
  e6:	9a 95       	dec	r25
  e8:	b1 f7       	brne	.-20     	; 0xd6 <loop132>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
  ea:	e6 17       	cp	r30, r22
  ec:	f7 07       	cpc	r31, r23
  ee:	89 f7       	brne	.-30     	; 0xd2 <ws2812_setleds_pin+0x2c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  f0:	3f bf       	out	0x3f, r19	; 63
  sei();
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  f6:	b8 9a       	sbi	0x17, 0	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  f8:	28 b3       	in	r18, 0x18	; 24
  fa:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  fc:	38 b3       	in	r19, 0x18	; 24
  fe:	31 60       	ori	r19, 0x01	; 1

  sreg_prev=SREG;
 100:	4f b7       	in	r20, 0x3f	; 63
  cli();
 102:	f8 94       	cli

  while (datlen--) {
 104:	61 15       	cp	r22, r1
 106:	71 05       	cpc	r23, r1
 108:	91 f0       	breq	.+36     	; 0x12e <loop197+0x1a>
 10a:	fc 01       	movw	r30, r24
 10c:	68 0f       	add	r22, r24
 10e:	79 1f       	adc	r23, r25
    curbyte=*data++;
 110:	81 91       	ld	r24, Z+

    __asm volatile(
 112:	98 e0       	ldi	r25, 0x08	; 8

00000114 <loop197>:
 114:	38 bb       	out	0x18, r19	; 24
 116:	00 00       	nop
 118:	87 ff       	sbrs	r24, 7
 11a:	28 bb       	out	0x18, r18	; 24
 11c:	88 0f       	add	r24, r24
 11e:	00 00       	nop
 120:	28 bb       	out	0x18, r18	; 24
 122:	00 c0       	rjmp	.+0      	; 0x124 <loop197+0x10>
 124:	9a 95       	dec	r25
 126:	b1 f7       	brne	.-20     	; 0x114 <loop197>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
 128:	e6 17       	cp	r30, r22
 12a:	f7 07       	cpc	r31, r23
 12c:	89 f7       	brne	.-30     	; 0x110 <ws2812_sendarray+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 12e:	4f bf       	out	0x3f, r20	; 63
  sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 134:	27 b3       	in	r18, 0x17	; 23
 136:	24 2b       	or	r18, r20
 138:	27 bb       	out	0x17, r18	; 23

  masklo	=~maskhi&ws2812_PORTREG;
 13a:	28 b3       	in	r18, 0x18	; 24
 13c:	34 2f       	mov	r19, r20
 13e:	30 95       	com	r19
 140:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
 142:	38 b3       	in	r19, 0x18	; 24
 144:	43 2b       	or	r20, r19

  sreg_prev=SREG;
 146:	3f b7       	in	r19, 0x3f	; 63
  cli();
 148:	f8 94       	cli

  while (datlen--) {
 14a:	61 15       	cp	r22, r1
 14c:	71 05       	cpc	r23, r1
 14e:	91 f0       	breq	.+36     	; 0x174 <loop259+0x1a>
 150:	fc 01       	movw	r30, r24
 152:	68 0f       	add	r22, r24
 154:	79 1f       	adc	r23, r25
    curbyte=*data++;
 156:	81 91       	ld	r24, Z+

    __asm volatile(
 158:	98 e0       	ldi	r25, 0x08	; 8

0000015a <loop259>:
 15a:	48 bb       	out	0x18, r20	; 24
 15c:	00 00       	nop
 15e:	87 ff       	sbrs	r24, 7
 160:	28 bb       	out	0x18, r18	; 24
 162:	88 0f       	add	r24, r24
 164:	00 00       	nop
 166:	28 bb       	out	0x18, r18	; 24
 168:	00 c0       	rjmp	.+0      	; 0x16a <loop259+0x10>
 16a:	9a 95       	dec	r25
 16c:	b1 f7       	brne	.-20     	; 0x15a <loop259>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
 16e:	e6 17       	cp	r30, r22
 170:	f7 07       	cpc	r31, r23
 172:	89 f7       	brne	.-30     	; 0x156 <ws2812_sendarray_mask+0x22>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 174:	3f bf       	out	0x3f, r19	; 63
  sei();
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <main>:
{
	struct pixel p = {255, 10, 140};
	static char cou = 0;
	
	// 9.6MHz/(256*37) = 1013HZ ~ 1ms
	TCCR0B = (1 << CS02);   // timer prescaler == 8
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	83 bf       	out	0x33, r24	; 51
	TCCR0A = (1 << WGM01);  // timer set to CTC mode
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	9f bd       	out	0x2f, r25	; 47
	TIMSK0 = (1 << OCIE0A); // enable CTC timer interrupt
 182:	89 bf       	out	0x39, r24	; 57
	OCR0A = 37; 
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	86 bf       	out	0x36, r24	; 54
	
	sei();
 188:	78 94       	sei

	set_sleep_mode(SLEEP_MODE_IDLE);    // only disable cpu and flash clk while sleeping
 18a:	85 b7       	in	r24, 0x35	; 53
 18c:	87 7e       	andi	r24, 0xE7	; 231
 18e:	85 bf       	out	0x35, r24	; 53
        color->r  = 0;
        color->g = pos * 3;
        color->b = 255 - pos * 3;
    }
	
	delay = 35;
 190:	c3 e2       	ldi	r28, 0x23	; 35

	set_sleep_mode(SLEEP_MODE_IDLE);    // only disable cpu and flash clk while sleeping
	/* loop */
	while (1) {

		color_wheel(cou++,&pixels[0]);
 192:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	98 0f       	add	r25, r24
 19a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
	return 0;
}

static inline char color_wheel(uint8_t pos, struct pixel *color)
{
    if (pos < 85) {
 19e:	85 35       	cpi	r24, 0x55	; 85
 1a0:	40 f1       	brcs	.+80     	; 0x1f2 <main+0x78>
    	color->r = pos * 3;
    	color->g = 255 - pos * 3;
    	color->b = 0;
    } else if (pos < 170) {
 1a2:	8a 3a       	cpi	r24, 0xAA	; 170
 1a4:	a8 f1       	brcs	.+106    	; 0x210 <main+0x96>
        pos -= 85;
        color->r = 255 - pos * 3;
        color->g = 0;
        color->b = pos * 3;
    } else {
        pos -= 170;
 1a6:	8a 5a       	subi	r24, 0xAA	; 170
        color->r  = 0;
 1a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pixels+0x1>
        color->g = pos * 3;
 1ac:	98 2f       	mov	r25, r24
 1ae:	99 0f       	add	r25, r25
 1b0:	98 0f       	add	r25, r24
 1b2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <pixels>
        color->b = 255 - pos * 3;
 1b6:	98 2f       	mov	r25, r24
 1b8:	99 0f       	add	r25, r25
 1ba:	99 0f       	add	r25, r25
 1bc:	89 1b       	sub	r24, r25
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <pixels+0x2>
    }
	
	delay = 35;
 1c4:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	/* loop */
	while (1) {

		color_wheel(cou++,&pixels[0]);
		//RGB_fire_run(&pixels[0],&p);
		ws2812_setleds((struct cRGB *)pixels, NR_OF_LEDS);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	83 e6       	ldi	r24, 0x63	; 99
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	46 df       	rcall	.-372    	; 0x5e <ws2812_setleds>
		while(delay--)
 1d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	98 0f       	add	r25, r24
 1da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	88 23       	and	r24, r24
 1e0:	c1 f2       	breq	.-80     	; 0x192 <main+0x18>
			sleep_mode();// sleep until timer interrupt is triggered
 1e2:	85 b7       	in	r24, 0x35	; 53
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	85 bf       	out	0x35, r24	; 53
 1e8:	88 95       	sleep
 1ea:	85 b7       	in	r24, 0x35	; 53
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	85 bf       	out	0x35, r24	; 53
 1f0:	f0 cf       	rjmp	.-32     	; 0x1d2 <main+0x58>
}

static inline char color_wheel(uint8_t pos, struct pixel *color)
{
    if (pos < 85) {
    	color->r = pos * 3;
 1f2:	98 2f       	mov	r25, r24
 1f4:	99 0f       	add	r25, r25
 1f6:	98 0f       	add	r25, r24
 1f8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <pixels+0x1>
    	color->g = 255 - pos * 3;
 1fc:	98 2f       	mov	r25, r24
 1fe:	99 0f       	add	r25, r25
 200:	99 0f       	add	r25, r25
 202:	89 1b       	sub	r24, r25
 204:	81 50       	subi	r24, 0x01	; 1
 206:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <pixels>
    	color->b = 0;
 20a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <pixels+0x2>
 20e:	da cf       	rjmp	.-76     	; 0x1c4 <main+0x4a>
    } else if (pos < 170) {
        pos -= 85;
 210:	85 55       	subi	r24, 0x55	; 85
        color->r = 255 - pos * 3;
 212:	98 2f       	mov	r25, r24
 214:	99 0f       	add	r25, r25
 216:	99 0f       	add	r25, r25
 218:	28 2f       	mov	r18, r24
 21a:	29 1b       	sub	r18, r25
 21c:	92 2f       	mov	r25, r18
 21e:	91 50       	subi	r25, 0x01	; 1
 220:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <pixels+0x1>
        color->g = 0;
 224:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <pixels>
        color->b = pos * 3;
 228:	98 2f       	mov	r25, r24
 22a:	99 0f       	add	r25, r25
 22c:	89 0f       	add	r24, r25
 22e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <pixels+0x2>
 232:	c8 cf       	rjmp	.-112    	; 0x1c4 <main+0x4a>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
